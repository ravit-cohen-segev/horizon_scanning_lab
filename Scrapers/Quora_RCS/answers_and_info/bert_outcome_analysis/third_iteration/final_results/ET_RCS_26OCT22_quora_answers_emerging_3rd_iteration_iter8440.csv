,Answer,followerCount,name,upvoteCount,answerCount,answerViews,year,question
0,"On September 10, 2020, HMS Core 5.0 made its debut at the Huawei Developer Conference. At the conference, Mr. Zhang Ping'an, President of Huawei Consumer Cloud Service, delivered a keynote speech titled ""Soaring to Greater Heights, Together with HMS."" As he noted, the HMS ecosystem has achieved a place among the top 3 mobile app ecosystems in the world in the short space of just one year.Previously, HMS Core 5.0 had already been released globally. Since last year's HDC, the number of registered developers within the HMS ecosystem has increased from 0.91 million to 1.8 million, and the number oOn September 10, 2020, HMS Core 5.0 made its debut at the Huawei Developer Conference. At the conference, Mr. Zhang Ping'an, President of Huawei Consumer Cloud Service, delivered a keynote speech titled ""Soaring to Greater Heights, Together with HMS."" As he noted, the HMS ecosystem has achieved a place among the top 3 mobile app ecosystems in the world in the short space of just one year.Previously, HMS Core 5.0 had already been released globally. Since last year's HDC, the number of registered developers within the HMS ecosystem has increased from 0.91 million to 1.8 million, and the number of apps integrated with HMS Core has increased from 43,000 to 96,000, an increase of 123%.HMS Core 5.0 opens up more software, hardware, and cloud capabilities, covering seven major domains including the app services, graphics, AI, and system domains. These capabilities can help developers build better apps.Graphics: A More Vivid Graphics ExperienceIn the graphics domain, HMS Core 5.0 provides services like Computer Graphics Kit, Accelerate Kit, and Scene Kit, enabling developers to improve the efficiency of app development and build a better user experience.Computer Graphics Kit provides a high-performance rendering framework and a series of rendering plug-ins. It is an open capability system based on GPU technologies. After integrating Computer Graphics Kit, game apps can improve their average frame rate by 13-16% and reduce their average power consumption by 11-13%*, offering users a better overall experience.* Data source: Huawei labsBy integrating Computer Graphics Kit, REVELATION (a mobile game from NetEase) has been able to utilize device-side graphics algorithms like anti-aliasing, volumetric cloud, and image super-resolution to provide more immersive 3D graphics rendering effects for users.In addition to Computer Graphics Kit, Scene Kit in the graphics domain provides multiple scenario-based APIs, helping developers achieve exquisite rendering effects more efficiently. Accelerate Kit provides developers with easy-to-use multi-thread APIs, helping them improve app performance with ease. Moreover, AR Engine provides developers with basic AR capabilities such as motion tracking, human body and face tracking, and environment tracking, enabling them to merge virtual and real world elements and by doing so build a brand-new interactive visual experience.AI: A World Without BarriersAs AI technologies continue to develop at an unprecedented pace, smart capabilities are becoming a must-have element in a developer's arsenal. Keeping abreast of the technology trend, ML Kit helps developers build AI-powered apps to help deliver an optimal user experience.According to Mr. Zhang Pingan, Huawei will open up all device-cloud capabilities to developers. This includes ML Kit, which provides services such as translation, text recognition, speech recognition, and face/body detection.ML Kit in HMS Core 5.0 helps developers easily build AI-powered apps. For apps integrated with ML Kit, the speed of face/person detection increases by 70% and the accuracy of text recognition reaches 99%, delivering a smarter and more convenient experience for the user.App Services: Allowing Developers to Focus on InnovationIn HMS Core 5.0, multiple app services have been enhanced. For example, Scan Kit improves the accuracy of barcode scanning and response speed in complex scenarios, thanks to the deep-learning barcode scanning engine. Map Kit provides new capabilities to plan routes for taking public transportation, helping developers enrich the practical functions of their apps.In his speech, Mr. Zhang Ping'an said that multiple top video apps in the Chinese mainland, such as Mango TV, Youku, and Tencent Video, had integrated WisePlay DRM, and that Huawei has been negotiating with multiple content producers to seek cooperation.WisePlay DRM not only enhances DRM protection capabilities from the software, hardware, to enhanced hardware levels, but also builds a complete ChinaDRM ecosystem under cooperation with ChinaDRM and operations organizations. Currently, multiple top video apps in the Chinese mainland have joined the ChinaDRM ecosystem, where WisePlay DRM plays an important role in offering free copyright protection services for audio and video apps.HMS: The Spark of Inspiration to Light the Way ForwardFinally, Mr. Zhang Ping'an said, ""We are constantly facing challenges. The greater the challenge, the more determined we are to build the HMS ecosystem. The huge challenges we faced have inspired us. With support from more and more excellent partners, we join hands with 700 million users around the world to open up HMS and look forward to achieving great things in the future.""HMS Core will be continuously optimized and enhanced in the future to provide richer and better app services, and Huawei looks forward to working together with global developers and partners to bring users a smart life experience in all scenarios.Tell me what you think of the Huawei Developer Conference 2020",352 followers,HMS Core,507,56,62.7M,2020,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
1,"On 10 September 2020, Huawei Developer Conference 2020 (Together) was held at Songshan Lake. In the keynote speech, Huawei announced major upcoming updates for HarmonyOS 2.0, EMUI 11, HMS(Huawei Mobile Services), HUAWEI HiLink, and HUAWEI Research. These improvements will empower global developers and ecosystem partners to provide enhanced and innovative user experiences for users.Below are the highlights of the Keynote:On 10 September 2020, Huawei Developer Conference 2020 (Together) was held at Songshan Lake. In the keynote speech, Huawei announced major upcoming updates for HarmonyOS 2.0, EMUI 11, HMS(Huawei Mobile Services), HUAWEI HiLink, and HUAWEI Research. These improvements will empower global developers and ecosystem partners to provide enhanced and innovative user experiences for users.Below are the highlights of the Keynote:","2,056 followers",Nelson Tan,24.1K,70,943.7K,2020,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
2,"In MWC 2021, Huawei captured no less than1. Best Mobile Network Infrastructure: Huawei for BladeAAU series2. Best Mobile Innovation for the Connected Economy: China Southern Power Grid 5G+Smart Grid3. Best Mobile Innovation for EmergIn MWC 2021, Huawei captured no less than1. Best Mobile Network Infrastructure: Huawei for BladeAAU series2. Best Mobile Innovation for the Connected Economy: China Southern Power Grid 5G+Smart Grid3. Best Mobile Innovation for Emerging Markets: Huawei for RuralStar Pro connectivity and digital inclusion solution4. Outstanding Mobile Contribution to the UN SDGs: Rainforest Connection (RFCx) & Huawei for Nature Guardian Project5. Best Innovation for COVID-19 Response & Recovery: China-Japan Friendship Hospital & Huawei for 5G Telemedicine Solution for COVID-19Huawei deserves the awardsÔºÅ","75,373 followers",Charissa Enget,1.8K,874,75.2M,2021,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
3,"For me it is not a matter of whether or not spaces bother me because after all, Eng lish hasspaces to he lpusp ickoutwordstoread so we donthavetoworkashard to figureitout. ;) So if the computer has to think like a human to read the text, compile times increase, and productivity decreases. A slow compiler is what would bother me the most.Now of course you only said function names, so that might be easier to parse (just grab all text between set tokens, or just take words that are not reserved and assume) but then anywhere it could be called would also have to follow a convention of figuring outFor me it is not a matter of whether or not spaces bother me because after all, Eng lish hasspaces to he lpusp ickoutwordstoread so we donthavetoworkashard to figureitout. ;) So if the computer has to think like a human to read the text, compile times increase, and productivity decreases. A slow compiler is what would bother me the most.Now of course you only said function names, so that might be easier to parse (just grab all text between set tokens, or just take words that are not reserved and assume) but then anywhere it could be called would also have to follow a convention of figuring out where the spaces are for the name (again, between tokens, or assumptions based on parser state), but all this assumption sounds like a recipe for increasing bugs and lowering productivity (and as I already stated, bad compile times).Finally, I can imagine keyword conflicts, code completion, and refactoring would be a nightmare. ;)",18 followers,Asim Qureshi,2.9K,996,156.1M,2018,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
4,"Not at all. I am fine with using spaces to demarcate my tokens in the source code.I do remember that I liked about Scheme that I could use -, + and ? in my identifiers and that I could not in other languages. I was never happy with underscores to replace the spaces since I had to press the Shift key to get them, and using - this was not necessary in Scheme. Of course, you do pay a price, in that you are not allowed to write things like a+2 and instead have to write a + 2 (I know, in Scheme this would be + a 2, but I assume you get the idea).","8,708 followers",Mario Galindo Queralt,1.4K,637,8.8M,2018,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
5,"Actually I‚Äôm quite sure that the extreme majority (99%) of all languages doActually, the knowledge that there even",96 followers,Kevin Hongtongsak,5.6K,0,0,2018,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
6,"Its never bothered me. It‚Äôs actually carried over into my daily life. CamelCasing is addictive! I find myself writing notes, grocery items, etc. all in camelcase.ToDoGetGroceriesFixFanOrganizeHouseIt‚Äôs efficient and after staring at it for years, I think it looks cleaner","29,208 followers",Mattias Petter Johansson,1.9K,1.1K,16.1M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
7,"No, I am ‚Äúold school.‚Äù Yingzi Li has an good answer as to why spaces in an identifier of any type might confuse the compiler. He has an excellent example in JavaScript about having a function name starting with the word ‚Äúget‚Äù that can cause confusion. Whenever I program, I want everything to be as clear as possible, so I do not use any white space in my names. I also want the names to be as descriptive as possible. Therefore, I use underscores to connect the words or use CamelCase to emphasize each word. For example, you might want a command to:convert from Fahrenheit to Celsiusthat is now itNo, I am ‚Äúold school.‚Äù Yingzi Li has an good answer as to why spaces in an identifier of any type might confuse the compiler. He has an excellent example in JavaScript about having a function name starting with the word ‚Äúget‚Äù that can cause confusion. Whenever I program, I want everything to be as clear as possible, so I do not use any white space in my names. I also want the names to be as descriptive as possible. Therefore, I use underscores to connect the words or use CamelCase to emphasize each word. For example, you might want a command to:convert from Fahrenheit to Celsiusthat is now it would look with white space, I would prefer either of the following:convert_from_Fahrenheit_to_Celsius(int f)convertFromFahrenheitToCelsius(float f)I believe white space is confusing to the programmer, the reader, and the maintainer and should not be used in code. The names with either underscores or CamelCase are descriptive enough and have no ambiguity.","1,450 followers",Max Poshusta,2.4K,860,4.8M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
8,"Not really. I like it when it‚Äôs available, like in Algol 68‚Äîbut Algol 68 lets you use one of several ‚Äústropping‚Äù techniques so it can distinguish language keywords from a piece of an identifier. Without that, you have the standard infamous Fortran ‚ÄúDO 100 I = 1.10‚Äù typo that silently turns what was intended to be the beginning of a DO loop into an assignment of 1.10 to a variable named DO100I.I‚Äôm happy to use underscores or CamelCase where needed.","1,822 followers",Panicz Godek,1K,261,1.9M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
9,Not in the least. Programming languages are written do that both programmers and computers can understand what is written. Spaces in names may make it easier for a programmer to understand (or make it more difficult). But it will make it more difficult to implement a correct compiler.,"56,374 followers",Charlie Cheever,5.9K,1.5K,9.4M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
10,"This question really boils down to preference. I find it hard to believe that any language allows spaces in function names, I didn't know that it was a thing. Every developer has their own preference when it comes to naming things, some people like camel case or snake case and so on. Personally I'm all for language convention, if the language or framework documentation uses a certain style stick with it. I think what's more important than case or format is what you label functions. A lecturer of mine at university said that in the olden days people used to call variables or functions by theirThis question really boils down to preference. I find it hard to believe that any language allows spaces in function names, I didn't know that it was a thing. Every developer has their own preference when it comes to naming things, some people like camel case or snake case and so on. Personally I'm all for language convention, if the language or framework documentation uses a certain style stick with it. I think what's more important than case or format is what you label functions. A lecturer of mine at university said that in the olden days people used to call variables or functions by their wives / girlfriends names or even worse a letter of the alphabet only. Imagine needing to find a bug in all that mess.",35 followers,Akshay Chopra,808,94,529.1K,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
11,"Not at all, even more, I don‚Äôt think it should be allowed.Why?Because the space is widely used to separate terms or indent code that it may easily lead to typos or unintended mistakes and the source of weird bugs.Out of the top of my head, it‚Äôd be weird to have a variable namedIt‚Äôd be always better to haveor",3 followers,Steve Baker,873,27.4K,163.4M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
12,"Not only function names do not allow for spaces, many programming languages do not allow spaces in identifiers. Some exceptions such as 4D programming language allows white space in function names and variables.Spaces in function names are easy for us to read, but make compiler confusing.For example, in a JavaScript function:var obj={log: [a,b,c],get latest (){if (this.log.length==0) {return undefined} return this.log.length}If a function name allows whitespace, then it will be pretty confusing whether ‚Äúget latest‚Äù is actually a function or ‚Äúget‚Äú is just a syntax that binds property ‚Äúlog‚Äù withNot only function names do not allow for spaces, many programming languages do not allow spaces in identifiers. Some exceptions such as 4D programming language allows white space in function names and variables.Spaces in function names are easy for us to read, but make compiler confusing.For example, in a JavaScript function:var obj={log: [a,b,c],get latest (){if (this.log.length==0) {return undefined} return this.log.length}If a function name allows whitespace, then it will be pretty confusing whether ‚Äúget latest‚Äù is actually a function or ‚Äúget‚Äú is just a syntax that binds property ‚Äúlog‚Äù with the function ‚Äúlatest‚Äù that will be called when ‚Äúlog‚Äù is looked up? In JavaScript, the latter is true.In compiling, the parser will separate the sequence of input characters i.e. syntax of a computer program into separate tokens and build a parse tree for analysis. Tokens are identified by delimiters, regular expression etc. Whitespace is a special character used by lexers to identify and separate tokens due to their natural use in programmingIn the above example, the string ‚Äúget latest ()‚Äùwill be parsed as IDENTIFIER GET, IDENTIFIER LATEST, OPEN_PARENTHESIS, CLOSE_PARENTHEDIS. If the funnction name that you want is ‚Äúgetlatest‚Äù, then this parsing is incorrect.","129,190 followers",Jessica Su,624,1.5K,49.8M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
13,"For the past 40+ years, it has been accepted that best practice in programming language design is to not allow spaces in any identifiers. It makes compilers easier (and faster!), but the bigger issue is that older languages had tendencies toward bugs. We‚Äôre hardly bug-free, but removing flexibility leads to fewer bugs, and it‚Äôs easier for students to understand and learn, as the rules are consistent. Adding a large set of rules for a rare case is usually not beneficial.","44,326 followers",Kurt Guntheroth,770,13.7K,167.4M,2018,https://www.quora.com/Does-it-bother-you-that-some-computer-languages-do-not-allow-for-spaces-in-function-names-whereas-others-do
14,"I wasn‚Äôt, you know, actuallyI have thoughts.The first, and largest, is that UNIX was not conceivedI wasn‚Äôt, you know, actuallyI have thoughts.The first, and largest, is that UNIX was not conceived in a time when ‚Äúdistributed computing‚Äù was even remotely on the radar. Tony Hoare‚Äôs ‚ÄúCommunicating Sequential Processes‚Äù is where things started to jell, and Needham‚Äôs and Lauer‚Äôs paper is where I mark the start of real work in the space: an operant model for making networks of computers function as de facto a single unit.Note that UNIX per se was ten years old at that point, even though V7 had just started shipping around the time of publication.Note as well that ‚Äúnetworks‚Äù were just coming into conception at that point as well - prior to around the same time as all this was happening, networks were at best point to point serial connections (and not very damn fast either!). Metcalf formed 3Com, the first commercial source for Ethernet cards in ‚Äô79 as well. Which barely worked. And were ridiculously expensive. And initially only available for really, really big systems. I digress.For further context, my good friend the late Bruce Nelson just starting the work that culminated in inventing remote procedure calls as a paradigm in his ‚Äô82 dissertation.So.I think we can agree then that UNIX as conceived by Ken and Dennis didn‚Äôt have a clue that the world existed outside the very real physical bounds of the single machine on which it ran.Further, shared memory multiprocessors were also thin on the ground. The CMU ‚ÄúPMS‚Äù switch that cross-bar‚Äôd the memory of 16 PDP-11s together in a ‚Äúclusterfuck of doom‚Äù configuration (not that I have opinions, mind you) which later evolved into the cm* system (still PDP-11s) was very late 70s ‚Äî ‚Äô78 or ‚Äô79 I think. I built my first shared-memory machine in ‚Äò81, around the time that BBN was building the Butterfly. (theirs was significantly bigger and arguably more elegant; mine was faster).UNIX was positively creaking with old age by this point.So the issues around which we find problematic behavior of the UNIX file semantics, regarding security and in particular both race conditions and unfederated access control, were not even on the table at any point in the evolution. And by the early 80s, the paradigms were very fully set, and theThe bare economy of the security management and enforcement in the UNIX kernel was mind blowing. Compared to commercial systems of the day, the notion that all I/O happened to a file, and more importantly that files were typeless (I‚Äôd like to think that the BCPL origins of UNIX played a part there, but have no confirmation of this) was radically different from say IBM systems where you not only had different file types between tape, cards and disk, but different file types on the different storage media, and god help you if you managed to mis-align your code and your JCL pointing your program at the specific stored bits!The identity and control paradigm was super simple and effective too. A operant entity (‚Äúuser‚Äù) owned it‚Äôs processes and files. And as in the real world, was part of ‚Äúeveryone‚Äù and also part of at least one (and often many) groups. You could read, edit, or execute based on the union of your permissions and the permissions on the file (which could be anything)As long as you‚Äôre on one box, with one single threaded CPU (no weird race conditions) this works swimmingly. Worked swimmingly, for a decade and a half.The introduction of sockets in 4bsd and IPC and shared memory in System V were interesting - they were very carefully crafted to provide off-system access paradigms (sockets much more so than IPC)So the opportunity to say ‚Äúyou know‚Ä¶ this whole paradigm gets aPart of this was also the firestorm raging over in TCP/IP-land where the notion of identity and federated identity was beaten to death, burned, and then the ashes scattered in moving water time and again. The fear was that we would be creating the opportunity for ‚Äúsettlements‚Äù ‚Äî basically charges for usage of the network, much like the then hideously expensive long distance voice networks ‚Äî which would completely stifle all experimentation with the networks.Think about it: if it cost you real money every time you sent a DM on your favorite platform, how many cat videos and memes would get passed? Face it, if every packet had to pay a toll, since ‚Äô81 when TCP went on-line, the world as we know it would not have come to exist.It was the right call, for sure. But it brought a lot of pain with it, and for my money the biggest of those pain points is that we have no way to truly and effectively tie a network action to a known identity.Which is where the security model breaks on cross-system UNIX file permissions.That was true even back in the very early days, when NFS rolled out in ‚Äò84. It was all based on UNIXWe‚Äôve come up with, over time, a number of interesting work-around and hedges and hacks in this space. But nothing - literally nothing - in common usage will let a particular human being identify themselves across the board to every computing system with which they interact in a way that assures that system (where/what-ever it is) that the remote interaction is in fact coming from that person.This is a central issue in identity and security.We had an opportunity to prevent this almost 40 years ago, but other pressures prevailed. I personally think that given what we knew at the time, that those were the right decisions. Remember, we were still arguing about how big ‚Äúthe Internet‚Äù was going to be, and most of the best guesses were in the ‚Äúmaybe a hundred thousand systems‚Äù range (!).So yeah, there are deficits in the design of UNIX. And they‚Äôre completely appropriate for the time and context of the time.",0 followers,Lucas Taylor,2.6K,1.7K,2M,2020,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
15,"Did Unix ‚Äúeverything is a file‚Äù turn out to be a bad idea since it enables some types of security vulnerabilities?Nope.It enabled a lot control that prevents most security vulnerabilities. Enforced separation between system and user, separation between groups of users and other groups of users, and between everyone else and designated user/groups.That foundation became more generalized by the addition of access control lists.Sure, some things were over looked (the ability to have reliable write only append to a file for instance), which was solved by using a service process to manage the additDid Unix ‚Äúeverything is a file‚Äù turn out to be a bad idea since it enables some types of security vulnerabilities?Nope.It enabled a lot control that prevents most security vulnerabilities. Enforced separation between system and user, separation between groups of users and other groups of users, and between everyone else and designated user/groups.That foundation became more generalized by the addition of access control lists.Sure, some things were over looked (the ability to have reliable write only append to a file for instance), which was solved by using a service process to manage the additions‚Ä¶It promoted the use of complex data storage by using service processes‚Ä¶ (now called databases).NFS file access has expanded the list of controls on files from just the read/write/execute list‚Ä¶ but still being mediated by service processes‚Ä¶The one known weak point was having an all powerful single identity‚Ä¶ which has also been addressed by removing access to that identity on some systems. Shown to work.It has even provided the foundation for expanded security control by adding the definition of mandatory access controls that can be used to impose controls that users don‚Äôt necessarily have access to.",0 followers,Chris Rapier,2K,498,1.3M,2020,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
16,"The use of the word fabric is simply a crutch to help our poor human minds try to grasp the concept of time and space being interrelated.  There is no ""fabric"" or layer or surface or cloth or woven pattern, etc. to space time.  It is a functional concept primarily known to us only by mathematics.  To ""experience"" any aspects of space-time, we must inject very high speed, very large distances and highly accurate metrics into our thinking.  Even then, we are only capable of small scale effects.  We can, of course, model or compute changes on any scale desired by making assumptions or imagining vThe use of the word fabric is simply a crutch to help our poor human minds try to grasp the concept of time and space being interrelated.  There is no ""fabric"" or layer or surface or cloth or woven pattern, etc. to space time.  It is a functional concept primarily known to us only by mathematics.  To ""experience"" any aspects of space-time, we must inject very high speed, very large distances and highly accurate metrics into our thinking.  Even then, we are only capable of small scale effects.  We can, of course, model or compute changes on any scale desired by making assumptions or imagining values and scales that will yield large and obvious effects - this includes math or modeled abrupt changes that might be construed as a tear or hole.That's the official and boring answer.  Now let's kick in some thinking outside the box.  Space and time are affected by speed and gravity so what if you could negate gravity and change the concept of speed?  Would that alter time and space as we know it?  OK, here's a thought experiment - The Higgs Field has been found to be the force that imparts mass to particles.  Mass creates gravity.  The Higgs Field is created by the  Higgs Boson.  The Higgs Boson is a particle that seems to permeate the entire universe but what if it is NOT evenly distributed.  In fact, what if we could find some energy, frequency, force, emission or radiation that can move, repel, attract or negate the Higgs Boson?  Not all that impossible considering forces and energy levels that exist in super novas, high powered lasers, etc.If we can vacate a space of the Higgs Boson, then most likely the Higgs Field would also be vacated-  That means that the particles of matter inside of this space that has no Higgs Field - will have no mass and therefore no gravity.  Without mass, the laws of physics say that any force would push the matter to the speed of light very easily - think ""photons"".  So, if we have a space ship that has a device that creates a bubble around the ship so that there are no Higgs Bosons within the bubble, then the ship will have no mass.  It will be weightless.  Now we turn on an ion engine that ejects electrons at the speed of light.  It will easily push the ship to the speed of light.  Because the people in the ship also have no mass, there is no momentum or inertia so they will have no sense of speed.  Even if they took a 90 degree turn at light speed.You might think of this bubble that is emptied of Higgs to be a warping of the Higgs Field - you might call it a warp field.If I can go at light speed because I am inside of this warp field, what happens to the time dilation prediction of Einstein's equation?  If I can move at light speed, how does space relate to distance and time if the speed is C and time is outside the reference field of the rest of the universe?At speed C, time stops for those traveling at that speed so you can travel billions of miles at that speed while someone not traveling with you experiences almost no time lapse.  The net effect is to appear that the distance has been reduced to almost nothing.  Is that a hole in space-time?  Is that a tear in space time?  All we can do is use our imagination.",195 followers,Henk Schuring,615,1.7K,1.2M,2016,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
17,"If you are comfortable with thinking of space as a fabric, then you also need to get comfortable with thinking that your scissors or ice-pick are also made of the same fabric. Then think about cutting fabric with fabric scissors or trying to puncture the fabric with a fabric ice-pick.Black holes are like cysts in space, but black holes will eventually evaporate and space will reoccupy the entire region as if no hole had ever been there.Space does not willingly cut, fold, staple or mutilate though it will happily bend and  stretch. It's very much the ideal self-mending material.9",0 followers,Ashok Bishnoi,12.8K,314,7.7M,2016,https://www.quora.com/What-are-the-biggest-announcements-from-the-Huawei-developer-Conference-2020
