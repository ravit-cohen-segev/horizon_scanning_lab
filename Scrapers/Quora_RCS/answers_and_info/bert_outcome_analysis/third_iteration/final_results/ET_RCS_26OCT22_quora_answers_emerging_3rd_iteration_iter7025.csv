,Answer,followerCount,name,upvoteCount,answerCount,answerViews,year,question
0,"In the Star Trek sense? We will never be able to do this. Ever.This is a problem of science that cannot be solved in any practical -- or even impractical way.Even if we could somehow figure out how to turn all your atoms into energy and store that energy ""pattern"" in a computer, project it out somewhere else, turn the energy back into atoms and create something thatIn the Star Trek sense? We will never be able to do this. Ever.This is a problem of science that cannot be solved in any practical -- or even impractical way.Even if we could somehow figure out how to turn all your atoms into energy and store that energy ""pattern"" in a computer, project it out somewhere else, turn the energy back into atoms and create something thatStar Trek did an exceptionally poor job of segregating the paradox of replication vs. transporting, but the reality is once matter is ""converted"" to energy, it loses any sense of the specific matter involved. To get the matter back, we can use any source of energy that we are capable of returning to material form. And therefore, we are relying on the template we have -- the ""pattern"" we created from you. We can reuse that over and over again. Have fun controlling such a technology; I'm sure no megalomaniac would use that to take over and destroy civilization inside of the first 10 minutes.Anyway, the good news is the physics are effectively not possible and based on our current understanding of physicsShould we overcome that impossibility, we have the very real issue that depositing a collection of billions, trillions, quadrillions, quintillions of atoms of scores of elements in a fraction of instant requires some sort of energy-to-matter technology that has not remotely been conceived of outside of stellar nuclei. But let's say you make a desktop sun so you can pull that off. Now, you simply have to precisely positions those quadrillions of atoms adjacent to each otherEven if I'm catastrophically wrong about this being impossible (and I'm not),","63,772 followers",Joshua Engel,614,15.1K,76.7M,2014,https://www.quora.com/How-close-are-we-to-teleportation
1,"Absolutely nowhere. Not the faintest hint of progress.The ""quantum teleportation"" that occasionally gets big press is not the slightest bit like teleportation like you see in sci-fi movies. It turns the quantum state of one particle into the state of another particle (which must destroy the state of the first particle in the process). You need to have exchanged entangled particles before you started. And this happens only by ""reading"" the state of one particle and sending it (at the speed of light or slower) to the other. You might as well just send the particle FedEx, in terms of speed and prAbsolutely nowhere. Not the faintest hint of progress.The ""quantum teleportation"" that occasionally gets big press is not the slightest bit like teleportation like you see in sci-fi movies. It turns the quantum state of one particle into the state of another particle (which must destroy the state of the first particle in the process). You need to have exchanged entangled particles before you started. And this happens only by ""reading"" the state of one particle and sending it (at the speed of light or slower) to the other. You might as well just send the particle FedEx, in terms of speed and practicality. It is a remarkable and important result. It's just not teleportation to me.If that sounds like teleportation to you, recall that this is working on a single particle, and you have, oh,","2,164 followers",Hamza Blackfyre,1.7K,2.2K,27.8M,2012,https://www.quora.com/How-close-are-we-to-teleportation
2,"There’s a scene in The Abyss, where they have to put the main character, Virgil, in a special scuba suit.This self-contained suit then fills with liquid and Virgil must purposely drown himself in it.There is this paralyzing moment where the water creeps over his face and he has to take this first “breath” and when he does he immediately begins twitching. It is gut wrenching because it reminds theThere’s a scene in The Abyss, where they have to put the main character, Virgil, in a special scuba suit.This self-contained suit then fills with liquid and Virgil must purposely drown himself in it.There is this paralyzing moment where the water creeps over his face and he has to take this first “breath” and when he does he immediately begins twitching. It is gut wrenching because it reminds the audience of our fear of drowning.(He is doing it because there is a nuclear bomb at the bottom of a crevice, deep in the ocean. The liquid suit will help him deal with the extreme pressure that will assault him.)To the question:There is actually a liquid that animals can breathe if you put them in it. It is called perfluorohexane. It...","358,993 followers",Sean Kernan,11.4K,5.6K,727.1M,2020,https://www.quora.com/How-close-are-we-to-teleportation
3,"Powered exoskeletons…“I am ze Rhino!”Sure, powered exoskeletons look pretty damn cool. I won’t argue there. And yeah, they’re a hell of a lot better than fighting somebody without one.But, here’s the thing about powered exoskeletons: the person within the exoskeleton limits the exoskeleton’s capabilities. Suddenly, the exoskeleton has to account for a person’s heat tolerance, the types of forces a person can withstand, a person’s range of motion… It’s a mess.Wouldn’t it just be smarter to design a robot instead of an exoskeleton, and man it remotely? Not only would you be able to build a far sPowered exoskeletons…“I am ze Rhino!”Sure, powered exoskeletons look pretty damn cool. I won’t argue there. And yeah, they’re a hell of a lot better than fighting somebody without one.But, here’s the thing about powered exoskeletons: the person within the exoskeleton limits the exoskeleton’s capabilities. Suddenly, the exoskeleton has to account for a person’s heat tolerance, the types of forces a person can withstand, a person’s range of motion… It’s a mess.Wouldn’t it just be smarter to design a robot instead of an exoskeleton, and man it remotely? Not only would you be able to build a far stronger machine — you don’t have to account for human limitations — but you’ll also be able to keep its operatorThere’s a reason why the U.S military invests tons of money into drones and robots, and barely anything into powered exoskeletons.Sorry Tony Stark: your Iron Man suit makes no goddamn sense.",0 followers,Jim Hogarth,10.5K,94,5.5M,2020,https://www.quora.com/How-close-are-we-to-teleportation
4,"If you use GPS or watch TV, the that signal has been bounced off of a satellite. Arthur C Clarke came up with the idea of geostationary artificial communications satellites long before sputnik.Star Trek came up with the idea of a communication device that flipped open to make it smaller.The Taser is named after a fictional device in a story. Thomas A Swift’s Electric Rifle. The story it comes from is from 1911, long before practical electric weapons were feasible.Jules Verne imagined submarines before they could be built.And there are many people who were inspired to go into science or engineeIf you use GPS or watch TV, the that signal has been bounced off of a satellite. Arthur C Clarke came up with the idea of geostationary artificial communications satellites long before sputnik.Star Trek came up with the idea of a communication device that flipped open to make it smaller.The Taser is named after a fictional device in a story. Thomas A Swift’s Electric Rifle. The story it comes from is from 1911, long before practical electric weapons were feasible.Jules Verne imagined submarines before they could be built.And there are many people who were inspired to go into science or engineering because of science fiction.",0 followers,Hannah Madden,5.3K,15K,17.1M,2019,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
5,"It’s appealing—the idea that science fiction writers are the visionaries who show the way. Young people are inspired by their ideas and grow up to be scientists, who then make discoveries. Engineers and entrepreneurs then propagate these ideas around the world in the form of products.In real life it’s often a very different—even opposite order of operations. Ordinary people observe something happening in everyday life. Then someone with practical, commercial knowledge notices and comes up with a way to make money from the idea. A scientist takes the resulting tool or process or product and turIt’s appealing—the idea that science fiction writers are the visionaries who show the way. Young people are inspired by their ideas and grow up to be scientists, who then make discoveries. Engineers and entrepreneurs then propagate these ideas around the world in the form of products.In real life it’s often a very different—even opposite order of operations. Ordinary people observe something happening in everyday life. Then someone with practical, commercial knowledge notices and comes up with a way to make money from the idea. A scientist takes the resulting tool or process or product and turns it in a new direction. Finally, fiction writers imagine and tell stories about the result.A good example is the telescope. In the distant past the magnifying lens was invented, likely when someone observed that a rock crystal pebble could enlarge objects seen through it.Around that time, Dutch eyeglass maker Hans Lippershey reports that he was watching children (my guess is—his own children) playing with lenses in his shop when he noticed they were using a concave and a convex lens held apart to enlarge a distant weathervane. He set a pair of lenses in a brass tube and called the result a “looker” (“kijker”). His idea was to sell these to the military for use in scouting enemy positions and terrain. The original “lookers” were capable of about 3X magnification. Lippershey made at least three different versions of them and indeed succeeded in selling them. The curious children playing was the first step in this chain, followed by an entrepreneur.Next, a French astronomer, Jacques Bovedere, obtained one of these “lookers” or perhaps just a description or patent drawing of it, and had the idea of pointing it upward at the night sky. When he shared this idea in a letter to an Italian colleague, the colleague (a guy named Galileo) made his own version of the device, in the process improving it to achieve about 20X magnification.Craters. He not only saw them but made drawings of what he saw.Very soon, astronomers all over Europe were looking at the moon through telescopes. Pierre Gassendi was among the most important. In 1631 he made some of the first measurements of the Transit of Mercury, the passage of the planet Mercury between the Earth and the sun. But Gassendi’s favorite telescopic subject was the moon. Today there’s a lunar crater that bears his name. Gassendi was also teacher, and his most famous pupil was not an astronomer but a storyteller, the playwright Cyrano de Bergerac, who wrote what is generally agreed to be the prototype of all science fiction novels, the first work of science fiction—20th century science fiction writers understood that a big part of their job was to take science fact, extrapolate it in a plausible direction, and write stories that would excite and engage their readers. But they mostly followed technology, they did not lead it. When William Gibson published his groundbreaking 1984 novelAnd neural networks are grounded in John Von Neumann’s WWII work on computers. The popular science article “As We May Think,” published inMost really big events in recent history were accompanied by a talented salesman who figured out a way to sell something. It was true in 1600 and it’s still true today.","2,522 followers",Martin Vratny,1.7K,2.9K,9.8M,2020,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
6,"I'm sure close examination will find many examples since so many science fiction authors have science or related backgrounds.  For example, Robert Heinlein had a math degree from Annapolis, and he tended to work out any gadgets needed in his stories.  I don't remember the details, but he asked a friend to read a story, and the friend was in the military.  By the time the story was published, a gadget in the story was being used in the war (Korean War, I think).  On the other hand, Heinlein still had his most brilliant characters using slide rules.Working from an old memory again, but the desigI'm sure close examination will find many examples since so many science fiction authors have science or related backgrounds.  For example, Robert Heinlein had a math degree from Annapolis, and he tended to work out any gadgets needed in his stories.  I don't remember the details, but he asked a friend to read a story, and the friend was in the military.  By the time the story was published, a gadget in the story was being used in the war (Korean War, I think).  On the other hand, Heinlein still had his most brilliant characters using slide rules.Working from an old memory again, but the design for the first high altitude suits, which became space suits later, was created by a team that included several science fiction authors (legit scientists as their ""day job""), and a main inspiration for the design was a suit described in an early 20th century story several of them were familiar with.Sorry for not being more specific, but if the subject interests you enough to do the research, that should lead you to more details.",0 followers,Tamara M,2.1K,101,14.1M,2015,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
7,"Absolutely. There is a cute documentary called ""How William Shatner Changed the World"" that is about how Star Trek influenced the engineers who came up with things like the first consumer cell phone, personal computers, medical imaging/scanning devices, etc.",495 followers,Megan McCarthy,3.5K,85,682.3K,2011,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
8,"The most important thing that software developers can learn is how to solve their client’s problems. That means being able to understand the business domain, the specifics of the client’s needs and desires, the environment available, etc., and convert that into a design and implementation.Technologies are tools. Knowing more is never a bad thing; the more you know, the more options you have for finding the best way to produce your solution. However, if you don’t understand what is needed and desired, you can’t apply those tools to any useful purpose.",42 followers,Andy Baker,2.8K,0,0,2018,https://www.quora.com/How-close-are-we-to-teleportation
9,Programming is a very amorphous definition but I’ll list some things I’ve seen go wrong with programmers who were pretty good at programming but lacked other relevant skills.Programming is a very amorphous definition but I’ll list some things I’ve seen go wrong with programmers who were pretty good at programming but lacked other relevant skills.,"44,321 followers",Kurt Guntheroth,1.5K,13.7K,167.4M,2018,https://www.quora.com/How-close-are-we-to-teleportation
10,"2. Also, if you can, learn algorithms design and space and time complexity theories otherwise you may one day find yourself solving an exponentially time complex problem with applying optimization techniques or worse you might find yourself diving head first attempting to solve an intractable problem. At the very least be aware of them and where a particular algorithm design technique can be used.In other words train yourself to be able to recognize2. Also, if you can, learn algorithms design and space and time complexity theories otherwise you may one day find yourself solving an exponentially time complex problem with applying optimization techniques or worse you might find yourself diving head first attempting to solve an intractable problem. At the very least be aware of them and where a particular algorithm design technique can be used.In other words train yourself to be able to recognize if a problem can be reduced to an already known, solvable problem for which an algorithm already exists. That way your problem is solved and its then only a matter of programming it in and that's left to you.3. To help you with 2, learn a design patterns and test driven development paradigm. Just as knowledge of algorithms help you to be able to see similarities between an already solved problem and your seemingly brand new 'cutting-edge' problem that no one has ever faced, for which you would have written a billionth library and published it to npm repo and github if you did not know that an algorithm already exists that efficiency solves your problem, you dont need to completely design your solution for implementation for scratch because there probably is a testable, efficient and elegant way for implementing this and knowing if an existing design pattern or multiple patterns can help you write most of the implementation that is easy to maintain is a MASSIVE plus! …",911 followers,Anthony Moh,8.5K,214,2.1M,2020,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
11,"“ Code “ can write anybody but besides as programming there will be some tech and no tech knowledge you should have that is ,",18 followers,Asim Qureshi,2.9K,996,156.1M,2019,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
12,"“Windows thanks to the gift of Windows Subsystem for Linux”Useable command interpreters of the shell kind were around in the cygnus package, or even mingw.",0 followers,Mika Timonen,876,5.3K,1.6M,2020,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
13,"First of all, we need to understand that when you saySo let's get to Front-end development.Here, you would develop applications (web/mobile/hybrid) that an end user would be able to see and interact with. The way this works is as follows:First of all, we need to understand that when you saySo let's get to Front-end development.Here, you would develop applications (web/mobile/hybrid) that an end user would be able to see and interact with. The way this works is as follows:If you combine point 1 and 2, you get a static website (for example - a landing page of a brand), and if you combine it with point 3, you get a dynamic website (for example - Quora).Go ahead and learn them in order as shown above.There are a ton of frameworks out there to handle point 1 & 2-and many more. Play around with some of the frameworks and get a feel for how they work. Next is point 3, and again there are a ton of frameworks that you can use -and many others. Do some projects in each and try to build yourself to learn anything quickly. I would suggest to go with React first as the learning curve is not as steep as the others. But its upto you. Many real world projects always demand some new technology or the other, so it's better to always keep learning.Next the backend technologies.Before you start, gain some basic knowledge about the internet, transfer protocols, servers, proxies, dns, APIs, IPs, authentication, sessions, cookies, etc.Then you can deep dive into one of the following :-→Node js/Express js (Javascript)→Flask (Python micro framework)→Django (Python out of the box ready framework)and many more. Pick one and start working on it by yourself. There’s no one good technology that you can learn. Every technology comes with a set of pros and cons. So whatever the project demands, you pick the technology accordingly.For example-UBER → They have used Express js that runs on Node js, because they want the code to be isomorphic(share code between front-end and backend with javascript) and Express js comes pre built with required modules that UBER engineers wanted to implement.You can learn about many kinds of Databases which are available now - MongoDBYou can also start learning about many more useful technologies such as -For testing → Jest,Mocha etc.What you must take away from this answer is, there are a ton of technologies that can be utilised to build almost anything. The only thing that you must do is to learn and apply what you learnt quickly.I have not mentioned about Cloud platforms(AWS/Azure/GCP), Servers, REST APIs, GraphQL, Hosting, Deployment etc. There is so much more, but for now go ahead and learn Front end development and then move on to backend.Happy coding.",142 followers,Vivek Kumar,945,0,0,2020,https://www.quora.com/How-close-are-we-to-teleportation
14,"3 months (approx, depending on your familiarity of programming languages and basic logic).1st month2nd Month:3 months (approx, depending on your familiarity of programming languages and basic logic).1st month2nd Month:3rd Month:That is it.But all these deadlines are dependent on an individual. They are by no means a hard deadlines, you can take your own time.",227 followers,Tejas Kumthekar,561,61,349.2K,2018,https://www.quora.com/How-close-are-we-to-teleportation
15,"There’s a pattern. The first step is going to be the hardest, for sure. I’ll answer this from my own example.I started learning HTML to see some stuff floating on the browser. Then I went on to add some style to it for which I needed to learn CSS. Well, I needed to manipulate my DOM elements dynamically and that’s when JS came into picture. There was a lot of time spent with these three. I did not even know what ‘full stack’ was back then. Curiosity made me learn stuff, it still does.I then learnt a bit about databases (relational) and MySQL to play with those. I wanted to make my statically sThere’s a pattern. The first step is going to be the hardest, for sure. I’ll answer this from my own example.I started learning HTML to see some stuff floating on the browser. Then I went on to add some style to it for which I needed to learn CSS. Well, I needed to manipulate my DOM elements dynamically and that’s when JS came into picture. There was a lot of time spent with these three. I did not even know what ‘full stack’ was back then. Curiosity made me learn stuff, it still does.I then learnt a bit about databases (relational) and MySQL to play with those. I wanted to make my statically sad websites have some information being pulled out and stored into a database. A kid in me thought it would be so cool. But how do I do that? That’s when I got to know about PHP (Well, that was 2011, do not judge me) and it would bridge the gap I wanted it to. Heck, I had become a full stack engineer. Naive, but a ‘full stack’ naive engineer.Following my curiosity induced paths, I started learning. Playing with the technologies, I started building apps. Most of those seem shitty in an introspection, but I am still proud of them. There was a mental model being built inside me, and that drove learning technologies, building cool stuff out of it, and as the time progressed, my tech stack grew. Mostly wide, but a bit deep too.Trying to set up a pattern (think, learn and build, iterate) and progressing on it would do the trick if I were asked now. The first few weeks or even months could be super frustrating and the odds say people quit during this interval. However, what’s worth the price is always worth the fight.","1,714 followers",Don Sevcik,2.9K,200,4.3M,2018,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
16,"Probably because it’s the greatest scam ever pushed on to the development industry. And, also, here’s another little dirty secret, the salary is about the same as a back end developer. So the point of this post is, why do everything if you aren’t getting paid more for it?You see, in the last 5–7 years, companies have gotten together and crafted a little scam. How can we make one person do more, but pay them about the same?So what they’ve done is start to push strong back end developers to learn the front end. But, they didn’t pay them much more. Then, they tried to make them learn servers. WheProbably because it’s the greatest scam ever pushed on to the development industry. And, also, here’s another little dirty secret, the salary is about the same as a back end developer. So the point of this post is, why do everything if you aren’t getting paid more for it?You see, in the last 5–7 years, companies have gotten together and crafted a little scam. How can we make one person do more, but pay them about the same?So what they’ve done is start to push strong back end developers to learn the front end. But, they didn’t pay them much more. Then, they tried to make them learn servers. Where as before, they had I.T. managers to handle and learn servers. For guys like me, the theory was, I’m handling the software, I don’t care to know the hardware. I don’t get paid for that. If I’m doing 2 jobs, I want 2 salaries, or at least 1.5 salaries.So it went from back end, to front end, to back + front + server. And it keeps expanding. But again, the salary hasn’t much changed. If I Google full stack developer in Chicago salary, I see that I make more than this as a primarily back endI’ve also seen another insidious trend, companies try to sneak in a “BA” role with a developer. So they want you to go to meetings, gather requirements, deal with the egos in the business, write the code. Great, so now you want me to do 3 jobs for one salary? Go kick rocks.Consider a strong back end developer. You pay them “x”. One year later after kicking ass at their job, they get a cost of living raise. Then suddenly, their boss asks them to start learning or doing front end development. The developer who doesn’t know the “do everything” scam figures, OK, I’ll do the front end as well to go for a bigger raise in Year 2. The developer executes the back end perfectly in year 2, and does pretty good on the front end. Logic tells you the company should throw money at him, since he’s replaced another 1/2 to 1 Full Time Employee.Ah, but again, raise time comes along and the money isn’t much. So the developer jumps ship and gets hired at another company. But the new company hires him first, then sneaks in another ask…learn servers.The entire process reeks. I hope we see this trend die, and we get back to “I do x, and you pay me y.” And if these silly companies ask you to do “x + z”, they pay you “1.25y”.P.S. - Sidenote for developers who’ve seen and been caught up in this trend. Be clear about what role you want when you start. I always say, “I don’t know about servers.” I’m clear on this. And then come raise time, if they push to have me do this after a cost of living raise, I tell them, “Since I’m doing 2 jobs, it’s probably best to pay me more than a COLA raise and bonus.”Another variant reply I use is, “If I’m doing back end, front end, and servers, what is the merit increase for this new role?” It alwaysa) shuts them uporb) they come back with, “you need to be more flexible.”By the way, “flexible” is like “team player”, code word for do more, and never get paid for it. What you do next is pull up related salaries and roles on the screen, and show them how doing more roles means you get paid more at other companies. This always shuts them up.You have to continuously remind these middle managers about your role. And if you do extra, they better give up the money. It’s a constant reminder and a constant push to the deep recesses of their brain to get the message through.",3 followers,Josh Begleiter,1.3K,632,1.4M,2018,https://www.quora.com/Does-science-fiction-influence-scientific-thought-and-technological-development-If-so-to-what-degree
